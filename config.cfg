FEATURES {
    STARTADDRESS: default = $2400;
}


SYMBOLS {
    __EXEHDR__:          type = import;  # value = $FFFF
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0C20; # 4kb for display stuff, including space already reserved for console
}


MEMORY {
    # Zero page
    ZP:          file = "", define = yes, start = $0082, size = $007E;

    # File header, value = $FFFF
    EXE_HEADER:  file = %O, start = $0000, size = $0002;

    # "System check" load chunk
    SYSCHK_HEAD: file = %O, start = $0000, size = $0004;
    SYSCHK_BODY: file = %O, start = $2E00, size = $0300;
    SYSCHK_TAIL: file = %O, start = $0000, size = $0006; # Short segment which sets INITAD

    # "Font" data chunk
    FONT_HEAD: file = %O, start = $0000, size = $0004;
    FONT_BODY: file = %O, start = $2000, size = $0400;

    # "Main program" chunk
    # %S means start address.
    MAIN_HEAD: file = %O, start = $0000, size = $0004;
    MAIN:      file = %O, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S, define = yes;
    MAIN_TAIL: file = %O, start = $0000, size = $0006;
}


SEGMENTS {
    ZEROPAGE:  load = ZP,          type = zp;
    EXTZP:     load = ZP,          type = zp,                optional = yes;

    EXEHDR:    load = EXE_HEADER,  type = ro;

    SYSCHKHDR: load = SYSCHK_HEAD, type = ro,                optional = yes;
    SYSCHK:    load = SYSCHK_BODY, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHK_TAIL, type = ro,                optional = yes;

    FONT_HEAD: load = FONT_HEAD,   type = ro;
    FONT:      load = FONT_BODY,   type = ro;

    MAINHDR:   load = MAIN_HEAD,   type = ro;
    STARTUP:   load = MAIN,        type = ro,  define = yes;
    LOWCODE:   load = MAIN,        type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,        type = ro,                optional = yes;
    CODE:      load = MAIN,        type = ro,  define = yes;
    RODATA:    load = MAIN,        type = ro;
    DATA:      load = MAIN,        type = rw;
    INIT:      load = MAIN,        type = rw,                optional = yes;
    BSS:       load = MAIN,        type = bss, define = yes;
    AUTOSTRT:  load = MAIN_TAIL,   type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
